Variables <- Clean_ACS_Variables(rbind(A,B)) %>%
mutate(Recoded = ifelse(grepl("No_schooling_completed",label),"No_School","CODE"),
Recoded = ifelse(grepl("grade|Kindergarten|Nursery",label),"K-12",Recoded),
Recoded = ifelse(grepl("Total_Population",label),label,Recoded),
Recoded = ifelse(grepl("Bachelor|Professional|Master|Doctorate",label),"Bachelor_more",Recoded),
Recoded = ifelse(grepl("Regular_high_school_diploma|high_school|GED|college|Associate",label),"High_School_No_Bachelor",Recoded),
Recoded = ifelse(grepl("10,000|19,999",label),"$10,000-$19,999",Recoded),
Recoded = ifelse(grepl("20,000|29,999",label),"$20,000-$29,999",Recoded),
Recoded = ifelse(grepl("30,000|39,999",label),"$30,000-$39,999",Recoded),
Recoded = ifelse(grepl("40,000|49,999",label),"$40,000-$49,999",Recoded),
Recoded = ifelse(grepl("50,000|74,999",label),"$50,000-$74,999",Recoded),
Recoded = ifelse(grepl("75,000|99,999",label),"$75,000-$99,999",Recoded),
Recoded = ifelse(grepl("B19001_014|B19001_015|B19001_016|B19001_017",name),"$100,000 more",Recoded))
ACS.Fixed <-  get_acs(geography = "tract",
variables = Variables$name,
state = "PA",
county = "Philadelphia",
output = "tidy",
geometry = FALSE,
year = 2019) %>%
dplyr::select (-moe) %>%
mutate(Category = ifelse(variable %in% A$name, "Education","Income"),
Year = ymd("2019-01-01"))
for(i in 1:nrow(Variables)) {
ACS.Fixed <- ACS.Fixed %>%
mutate(variable = str_replace(variable,Variables$name[i],Variables$Recoded[i]))
}
View(ACS.Fixed)
View(ACS.wide)
View(ACS.Fixed)
colnames(ACS.Fixed)
View(ACS.Fixed)
View(ACS.Fixed)
colnames(ACS.Fixed)
colnames(ACS.Fixed)[-4]
colnames(ACS.Fixed)
ACS.Fixed %>%
group_by(colnames(ACS.Fixed)[-4]) %>%
summarize(estimate = sum(estimate)) %>%
View()
colnames(ACS.Fixed)
ACS.Fixed %>%
group_by(GEOID,NAME,variable,Category,Year) %>%
summarize(estimate = sum(estimate)) %>%
View()
B <- load_variables(2019,
"acs5",
cache = FALSE) %>%
filter(concept == "HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2019 INFLATION-ADJUSTED DOLLARS)") %>%
mutate(Merge_name = paste(name,"E", sep =""))
A <- load_variables(2019,
"acs5",
cache = FALSE) %>%
filter(concept == "EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER") %>%
mutate(Merge_name = paste(name,"E", sep =""))
Variables <- Clean_ACS_Variables(rbind(A,B)) %>%
mutate(Recoded = ifelse(grepl("No_schooling_completed",label),"No_School","CODE"),
Recoded = ifelse(grepl("grade|Kindergarten|Nursery",label),"K-12",Recoded),
Recoded = ifelse(grepl("Total_Population",label),label,Recoded),
Recoded = ifelse(grepl("Bachelor|Professional|Master|Doctorate",label),"Bachelor_more",Recoded),
Recoded = ifelse(grepl("Regular_high_school_diploma|high_school|GED|college|Associate",label),"High_School_No_Bachelor",Recoded),
Recoded = ifelse(grepl("10,000|19,999",label),"$10,000-$19,999",Recoded),
Recoded = ifelse(grepl("20,000|29,999",label),"$20,000-$29,999",Recoded),
Recoded = ifelse(grepl("30,000|39,999",label),"$30,000-$39,999",Recoded),
Recoded = ifelse(grepl("40,000|49,999",label),"$40,000-$49,999",Recoded),
Recoded = ifelse(grepl("50,000|74,999",label),"$50,000-$74,999",Recoded),
Recoded = ifelse(grepl("75,000|99,999",label),"$75,000-$99,999",Recoded),
Recoded = ifelse(grepl("B19001_014|B19001_015|B19001_016|B19001_017",name),"$100,000 more",Recoded))
ACS.Fixed <-  get_acs(geography = "tract",
variables = Variables$name,
state = "PA",
county = "Philadelphia",
output = "tidy",
geometry = FALSE,
year = 2019) %>%
dplyr::select (-moe) %>%
mutate(Category = ifelse(variable %in% A$name, "Education","Income"),
Year = ymd("2019-01-01"))
for(i in 1:nrow(Variables)) {
ACS.Fixed <- ACS.Fixed %>%
mutate(variable = str_replace(variable,Variables$name[i],Variables$Recoded[i]))
}
ACS.Fixed <- ACS.Fixed %>%
group_by(GEOID,NAME,variable,Category,Year) %>%
summarize(estimate = sum(estimate))
View(ACS.Fixed)
for(f in 1:length(Years)){
merge <-  get_acs(geography = "tract",
variables = Variables$name,
state = "PA",
county = "Philadelphia",
output = "tidy",
geometry = FALSE,
year = 2019) %>%
dplyr::select (-moe) %>%
mutate(Category = ifelse(variable %in% A$name, "Education","Income"),
Year = ymd(paste(Years[f],"0101")))
for(i in 1:nrow(Variables)) {
merge <- merge %>%
mutate(variable = str_replace(variable,Variables$name[i],Variables$Recoded[i]))
}
merge <- merge %>%
group_by(GEOID,NAME,variable,Category,Year) %>%
summarize(estimate = sum(estimate))
ACS.Fixed <- rbind(ACS.Fixed,merge)
}
View(ACS.Fixed)
ACS.Long <- left_join(ACS.Long,
ACS.Fixed %>%
filter(Category == "Education") %>%
select(-Category) %>%
rename(Education = variable,
Education_frequency = estimate),
by = c("Year","GEOID","NAME"))
View(ACS.Long)
# Datasets
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(opentripplanner, tidytransit, tidyverse, sf, tigris, ggmap, tidycensus, stm, readxl, lubridate, gganimate, survey, srvyr, caret)
register_google(key = "AIzaSyDIDS0OgrYmmrJO221DhqIaEnMq9tQrMr0")
options(scipen = 999)
options(scipen =  "sf")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
#At some point you need to put Pacific Islanders into your analysis.
#The asian group does not include Pacific Islanders
# ---------------------------
ACS_Variables <- function(year,search){
load_variables(year,
"acs5",
cache = FALSE) %>%
filter(concept == search)  %>%
mutate(Merge_name = paste(name,"E", sep =""))
}
A <- ACS_Variables(2019,"RACE")
A <- load_variables(2019,
"acs5",
cache = FALSE) %>%
filter(concept == "RACE")  %>%
mutate(Merge_name = paste(name,"E", sep =""))
B <- load_variables(2019,
"acs5",
cache = FALSE) %>%
filter(grepl("ASIAN ALONE BY SELECTED GROUPS", concept)) %>%
mutate(Merge_name = paste(name,"E", sep ="")) %>%
slice(-1)
Clean_ACS_Variables <- function(df){
df %>%
mutate(
label = str_remove(label,"Estimate!!"),
label = str_remove(label,"Total:!!"),
label = str_remove_all(label,"!!"),
label = str_replace_all(label,":"," "),
label = str_trim(label),
label = str_replace_all(label," ","_"),
label = str_replace(label,"Total","Total_Population"))
}
Variables <- Clean_ACS_Variables(rbind(A,B))
ACS.wide <-  get_acs(geography = "tract",
variables = Variables$name,
state = "PA",
county = "Philadelphia",
output = "wide",
geometry = TRUE,
year = 2019) %>%
dplyr::select (GEOID, NAME, ends_with("E")) %>%
st_transform(st_crs(Universities))
col.from <- colnames(ACS.wide)
colnames(ACS.wide)
cols <- Variables$label
namestoAdd <- c("GEOID","NAME")
cols <- append(namestoAdd, cols)
cols.to <- append(cols, "geometry")
## this function below renames all the columns based on the two lists that we made. that being col.from the variables original names to cols.to are the names that we made from the list of census data.
ACS.wide  <- ACS.wide  %>%
rename_at(vars(col.from), function(x) cols.to) %>%
mutate(Asian_pop = Asian_alone)
ACS.Long <- pivot_longer(ACS.wide,4:(ncol(ACS.wide)-2), names_to = "Race_Ethnicity", values_to = "Frequency") %>%
mutate(Tot_Percentage = (Frequency/Total_Population)*100,
Asian_Percentage = (Frequency/Asian_pop) * 100,
Year = ymd(paste(2019,"0101")))
Years <- seq(from = 2011, to = 2018, by = 1)
for(i in 1:length(Years)) {
A <- load_variables(Years[i],
"acs5",
cache = FALSE) %>%
filter(concept == "RACE")  %>%
mutate(Merge_name = paste(name,"E", sep =""))
B <- load_variables(Years[i],
"acs5",
cache = FALSE) %>%
filter(grepl("ASIAN ALONE BY SELECTED GROUPS", concept)) %>%
mutate(Merge_name = paste(name,"E", sep ="")) %>%
slice(-1)
Variables <- bind_rows(A,B) %>%
mutate(
label = str_remove(label,"Estimate!!"),
label = str_remove(label,"Total:!!"),
label = str_remove(label,"Total!!"),
label = str_remove_all(label,"!!"),
label = str_replace_all(label,":"," "),
label = str_trim(label),
label = str_replace_all(label," ","_"),
label = str_replace(label,"Total","Total_Population")
)
ACS.wide <-  get_acs(geography = "tract",
variables = Variables$name,
state = "PA",
county = "Philadelphia",
output = "wide",
geometry = TRUE,
year = Years[i]) %>%
dplyr::select (GEOID, NAME, ends_with("E")) %>%
st_transform(st_crs(Universities))
col.from <- colnames(ACS.wide)
colnames(ACS.wide)
cols <- Variables$label
namestoAdd <- c("GEOID","NAME")
cols <- append(namestoAdd, cols)
cols.to <- append(cols, "geometry")
ACS.wide  <- ACS.wide  %>%
rename_at(vars(col.from), function(x) cols.to) %>%
mutate(Asian_pop = Asian_alone)
f <- pivot_longer(ACS.wide,4:(ncol(ACS.wide)-2), names_to = "Race_Ethnicity", values_to = "Frequency") %>%
mutate(Tot_Percentage = (Frequency/Total_Population)*100,
Asian_Percentage = (Frequency/Asian_pop) * 100,
Year = ymd(paste(Years[i],"0101")))
ACS.Long <- rbind(ACS.Long,f)
}
exclude <- c("15007990300", "15009990000", "15009991200", "15001990000", "15001990100", "15001990400", "15001990500", "15001990600", "15001990700", "15001990800", "15001990900", "15001991000", "15001991100","15001991200", "15001991300", "15001991400", "15001991500", "15001991600", "15001991700", "15005990000", "15003980300","15009990200","15003981200","15003980800","15001990300","15007990100","15003981300", "15007990200", "15003990001", "15007041200", "15009980000", "15003980000", "15003981000", "15003980700", "15003980600")
ACS.Long <- ACS.Long %>%
filter(!GEOID %in% exclude) %>%
mutate(Race_Ethnicity = str_remove(Race_Ethnicity,"Total_Population"),
Race_Ethnicity = str_replace(Race_Ethnicity,"Chinese_,_except_Taiwanese","Chinese,_except_Taiwanese"),
Race_Ethnicity = str_replace(Race_Ethnicity,"Two_or_more_racesTwo_races_including_Some_other_race","Two_or_more_races_Two_races_including_Some_other_race"),
Race_Ethnicity = str_replace(Race_Ethnicity,"Two_or_more_racesTwo_races_excluding_Some_other_race,_and_three_or_more_races","Two_or_more_races_Two_races_excluding_Some_other_race,_and_three_or_more_races"))
test <- ACS.Long %>%
mutate(Year_perm = Year) %>%
pivot_wider(names_from = Year, values_from = Frequency) %>%
rename(Year = Year_perm)
change_over_time <- test %>%
filter(Year == unique(ACS.Long$Year)[1]) %>%
select(GEOID,Race_Ethnicity) %>%
na.omit()
for(i in 1:length(unique(ACS.Long$Year))) {
x <- 9+i
f <- test %>%
filter(Year == unique(ACS.Long$Year)[i]) %>%
select(GEOID,Race_Ethnicity,x) %>%
na.omit()
change_over_time <- left_join(change_over_time, f, by = c("GEOID","Race_Ethnicity"))
}
change_over_time <- change_over_time %>%
mutate(CoT2012 = (`2012-01-01` - `2011-01-01`),
CoT2013 = (`2013-01-01` - `2012-01-01`),
CoT2014 = (`2014-01-01` - `2013-01-01`),
CoT2015 = (`2015-01-01` - `2014-01-01`),
CoT2016 = (`2016-01-01` - `2015-01-01`),
CoT2017 = (`2017-01-01` - `2016-01-01`),
CoT2018 = (`2018-01-01` - `2017-01-01`),
CoT2019 = (`2019-01-01` - `2018-01-01`),
CoT2011_2019 = (`2019-01-01` - `2011-01-01`),
CoTP2012 = (`2012-01-01` - `2011-01-01`)/`2011-01-01`*100,
CoTP2013 = (`2013-01-01` - `2012-01-01`)/`2012-01-01`*100,
CoTP2014 = (`2014-01-01` - `2013-01-01`)/`2013-01-01`*100,
CoTP2015 = (`2015-01-01` - `2014-01-01`)/`2014-01-01`*100,
CoTP2016 = (`2016-01-01` - `2015-01-01`)/`2015-01-01`*100,
CoTP2017 = (`2017-01-01` - `2016-01-01`)/`2016-01-01`*100,
CoTP2018 = (`2018-01-01` - `2017-01-01`)/`2017-01-01`*100,
CoTP2019 = (`2019-01-01` - `2018-01-01`)/`2018-01-01`*100,
CoTP2011_2019 = (`2019-01-01` - `2011-01-01`)/`2011-01-01`*100)
#Change_over_time_Freq <- change_over_time %>%
#                            select(1,2,12:19) %>%
#                            pivot_longer(cols = starts_with("COT"), names_to = "Year", values_to = "Change_by_year") %>%
#                            mutate(Year = str_remove(as.character(Year),"CoT"),
#                                   Year = ymd(paste0(Year,"0101")))
ACS.Long <- left_join(ACS.Long,
change_over_time %>%
select(1,2,12:19) %>%
pivot_longer(cols = starts_with("COT"), names_to = "Year", values_to = "Change_by_year") %>%
mutate(Year = str_remove(as.character(Year),"CoT"),
Year = ymd(paste0(Year,"0101"))),
by = c("GEOID","Race_Ethnicity","Year"))
#change_over_time_Perc <- change_over_time %>%
#                            select(1,2,starts_with("COTP")) %>%
#                            select(-CoTP2011_2019) %>%
#                            pivot_longer(cols = starts_with("COTP"), names_to = "Year", values_to = "Change_by_year") %>%
#                            mutate(Year = str_remove(as.character(Year),"CoTP"),
#                                   Year = ymd(paste0(Year,"0101")))
ACS.Long <- left_join(ACS.Long,
change_over_time %>%
select(1,2,starts_with("COTP")) %>%
select(-CoTP2011_2019) %>%
pivot_longer(cols = starts_with("COTP"), names_to = "Year", values_to = "Change_by_year_Percent") %>%
mutate(Year = str_remove(as.character(Year),"CoTP"),
Year = ymd(paste0(Year,"0101"))),
by = c("GEOID","Race_Ethnicity","Year"))
# Chinese ratio
ACS.Long <- ACS.Long %>%
st_drop_geometry() %>%
group_by(Year, GEOID, Race_Ethnicity) %>%
summarize(Total = sum(Frequency)) %>%
filter(Race_Ethnicity == "Chinese,_except_Taiwanese") %>%
select(-Race_Ethnicity) %>%
rename(Chinese_population = Total) %>%
left_join(ACS.Long, by = c("Year","GEOID")) %>%
relocate(Chinese_population, .after = last_col()) %>%
mutate(Ratio_Chinese = Frequency/Chinese_population) %>%
st_as_sf()
# testing normalization script -----------------
#df <- ACS.Long %>%
#  filter(Year == unique(ACS.Long$Year)[1]) %>%
#  filter(Race_Ethnicity == unique(ACS.Long$Race_Ethnicity[1]))
#process <- preProcess(as.data.frame(df)[8],
#                      method = c("range"))
#norm_scale <- predict(process, as.data.frame(df)[8])
#Normalized <- cbind(df,
#            norm_scale %>%
#              rename(Normalize = Frequency))
# Normalization loop ---------------------
Normalized <- data.frame(matrix(ncol = (length(colnames(ACS.Long))+1), nrow=0))
colnames(Normalized) <- append(colnames(ACS.Long),"Normalize")
Normalized <- Normalized %>%
select(Year,GEOID,Race_Ethnicity,Frequency)
Full_normalized <- data.frame(matrix(ncol = (length(colnames(ACS.Long))+1), nrow=0))
colnames(Full_normalized) <- append(colnames(ACS.Long),"Normalize")
Full_normalized <- Full_normalized %>%
select(Year,GEOID,Race_Ethnicity,Frequency,Normalize)
for(i in 1:length(unique(ACS.Long$Year))){
df <- ACS.Long %>%
select(Year,GEOID,Race_Ethnicity,Frequency) %>%
filter(Year == unique(ACS.Long$Year)[i]) %>%
st_drop_geometry()
for(f in 1:length(unique(ACS.Long$Race_Ethnicity))){
df_Ethnicity <- df %>%
filter(Race_Ethnicity == unique(ACS.Long$Race_Ethnicity[f]))
process <- caret::preProcess(as.data.frame(df_Ethnicity)[4],
method = c("range"))
norm_scale <- predict(process, as.data.frame(df_Ethnicity)[4])
one_race_object <- cbind(df_Ethnicity,
norm_scale %>%
rename(Normalize = Frequency))
Normalized <- rbind(Normalized,one_race_object)
}
Full_normalized <- rbind(Normalized,
Full_normalized %>%
mutate(Year = lubridate::as_date(Year),
GEOID = as.character(GEOID),
Race_Ethnicity = as.character(Race_Ethnicity)))
}
ACS.Long <- left_join(ACS.Long,
Full_normalized %>%
select(Year,GEOID,Race_Ethnicity,Normalize),
by = c("Year","GEOID","Race_Ethnicity")) %>%
unique() %>%
relocate(geometry, .after = last_col()) %>%
st_as_sf()
Asians <- as.tibble(unique(ACS.Long$Race_Ethnicity)[10:length(unique(ACS.Long$Race_Ethnicity))]) %>%
rename(Ethnicity = value) %>%
mutate()
# Adding fixed census tract effects ------------------------
B <- load_variables(2019,
"acs5",
cache = FALSE) %>%
filter(concept == "HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2019 INFLATION-ADJUSTED DOLLARS)") %>%
mutate(Merge_name = paste(name,"E", sep =""))
A <- load_variables(2019,
"acs5",
cache = FALSE) %>%
filter(concept == "EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER") %>%
mutate(Merge_name = paste(name,"E", sep =""))
Variables <- Clean_ACS_Variables(rbind(A,B)) %>%
mutate(Recoded = ifelse(grepl("No_schooling_completed",label),"No_School","CODE"),
Recoded = ifelse(grepl("grade|Kindergarten|Nursery",label),"K-12",Recoded),
Recoded = ifelse(grepl("Total_Population",label),label,Recoded),
Recoded = ifelse(grepl("Bachelor|Professional|Master|Doctorate",label),"Bachelor_more",Recoded),
Recoded = ifelse(grepl("Regular_high_school_diploma|high_school|GED|college|Associate",label),"High_School_No_Bachelor",Recoded),
Recoded = ifelse(grepl("10,000|19,999",label),"$10,000-$19,999",Recoded),
Recoded = ifelse(grepl("20,000|29,999",label),"$20,000-$29,999",Recoded),
Recoded = ifelse(grepl("30,000|39,999",label),"$30,000-$39,999",Recoded),
Recoded = ifelse(grepl("40,000|49,999",label),"$40,000-$49,999",Recoded),
Recoded = ifelse(grepl("50,000|74,999",label),"$50,000-$74,999",Recoded),
Recoded = ifelse(grepl("75,000|99,999",label),"$75,000-$99,999",Recoded),
Recoded = ifelse(grepl("B19001_014|B19001_015|B19001_016|B19001_017",name),"$100,000 more",Recoded))
ACS.Fixed <-  get_acs(geography = "tract",
variables = Variables$name,
state = "PA",
county = "Philadelphia",
output = "tidy",
geometry = FALSE,
year = 2019) %>%
dplyr::select (-moe) %>%
mutate(Category = ifelse(variable %in% A$name, "Education","Income"),
Year = ymd("2019-01-01"))
for(i in 1:nrow(Variables)) {
ACS.Fixed <- ACS.Fixed %>%
mutate(variable = str_replace(variable,Variables$name[i],Variables$Recoded[i]))
}
ACS.Fixed <- ACS.Fixed %>%
group_by(GEOID,NAME,variable,Category,Year) %>%
summarize(estimate = sum(estimate))
# looping years -----------------------------
for(f in 1:length(Years)){
merge <-  get_acs(geography = "tract",
variables = Variables$name,
state = "PA",
county = "Philadelphia",
output = "tidy",
geometry = FALSE,
year = 2019) %>%
dplyr::select (-moe) %>%
mutate(Category = ifelse(variable %in% A$name, "Education","Income"),
Year = ymd(paste(Years[f],"0101")))
for(i in 1:nrow(Variables)) {
merge <- merge %>%
mutate(variable = str_replace(variable,Variables$name[i],Variables$Recoded[i]))
}
merge <- merge %>%
group_by(GEOID,NAME,variable,Category,Year) %>%
summarize(estimate = sum(estimate))
ACS.Fixed <- rbind(ACS.Fixed,merge)
}
View(ACS.Long)
ACS.Long <- left_join(ACS.Long,
ACS.Fixed %>%
filter(Category == "Education") %>%
select(-Category) %>%
rename(Education = variable,
Education_frequency = estimate),
by = c("Year","GEOID","NAME"))
ACS.Long <- left_join(ACS.Long,
ACS.Fixed %>%
filter(Category == "Income") %>%
select(-Category) %>%
rename(Income = variable,
Income_frequency = estimate),
by = c("Year","GEOID","NAME")) %>%
filter(!Education == "Total_Population") %>%
filter(!Income == "Total_Population") %>%
st_as_sf()
View(ACS.Long)
source("Data/ShapeFiles.R")
source("Data/SafeGraph.R")
source("Data/Census_Data.R")
source("Data/Gmaps_Locations.R")
source("Data/IPEDS_DATA.R")
source("Data/Carnegie_Classification.R")
source("Data/Philly_School_metrics.R")
source("Data/GTFS_Data.R")
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(sp,ISLR,MASS,spatstat,spatial,maptools,ppp,fossil,adehabitHR,gdata,raster,rgdal,geostatst, spdep, caret)
library(tidyverse)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(grid)
library(gridExtra)
library(knitr)
library(kableExtra)
library(tidycensus)
library(scales)
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# Log transform the population to even out the skew
ACS.Long %>%
filter(Race_Ethnicity == "Asian_alone") %>%
mutate(Frequency_log = log(Frequency)) %>%
ggplot() +
geom_histogram( aes(x = Frequency_log))
df <- ACS.Long %>%
filter(Year == "2017-01-01") %>%
filter(Race_Ethnicity == unique(ACS.Long$Race_Ethnicity[2])) %>%
na.omit() %>%
st_as_sf()
nb <- poly2nb(df,
queen = TRUE)
lw <- nb2listw(nb, style = "W", zero.policy = TRUE)
#Moran's I the easy way -----------------------------
moran.test(df$Frequency,lw)
MC <- moran.mc(df$Frequency,lw,nsim=599)
plot(MC,main ="", las=1)
ACS.Long$Race_Ethnicity[2]
unique(ACS.Long$Race_Ethnicity[2])
unique(ACS.Long$Race_Ethnicity[4])
unique(ACS.Long$Race_Ethnicity)[24]
unique(ACS.Long$Race_Ethnicity)[5]
unique(ACS.Long$Race_Ethnicity)[4]
df <- ACS.Long %>%
filter(Year == "2017-01-01") %>%
filter(Race_Ethnicity == unique(ACS.Long$Race_Ethnicity)[4]) %>%
na.omit() %>%
st_as_sf()
nb <- poly2nb(df,
queen = TRUE)
lw <- nb2listw(nb, style = "W", zero.policy = TRUE)
#Moran's I the easy way -----------------------------
moran.test(df$Frequency,lw)
#Moran's I the easy way -----------------------------
moran.test(df$Frequency,lw)
MC <- moran.mc(df$Frequency,lw,nsim=599)
MC
View(MC)
MC$statistic[1]
MC$p.value
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(opentripplanner, tidytransit, tidyverse, sf, tigris, ggmap, tidycensus, stm, readxl, lubridate, gganimate)
register_google(key = "AIzaSyDIDS0OgrYmmrJO221DhqIaEnMq9tQrMr0")
options(scipen = 999)
options(scipen =  "sf")
getwd()
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# Data Import and Cleaning --------------------------------
source("Data/ShapeFiles.R")
source("Data/SafeGraph.R")
